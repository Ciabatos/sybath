// GENERATED CODE - DO NOT EDIT MANUALLY - dbGetTable.hbs

"use server"
import { query } from "@/db/postgresMainDatabase/postgresMainDatabase"

{{#if methodParamsColumns}}
export type {{methodParamsTypeName}} = {
{{#each methodParamsColumns}}
  {{camelName}}: {{tsType}}
{{/each}}
}
{{/if}}

export type {{methodTypeName}} = {
{{#each methodColumns}}
  {{camelName}}{{optional}}: {{tsType}}
{{/each}}
}


{{#if (eq indexMethodName "arrayToObjectKeysId")}}
export type {{indexTypeName}} = Record<string, {{methodTypeName}}>
{{else}}
export type {{indexTypeName}} = Record<number, {{methodTypeName}}> 
{{/if}}


export async function {{methodName}}({{#if methodParamsColumns}}params:{{methodParamsTypeName}}{{/if}}) {
  try {
    {{#if methodParamsColumns}}
    const camelToSnake = (str: string) => str.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`)

    const sqlParams = Object.values(params)
    const whereClauses = Object.keys(params).map((key, i) => `"${camelToSnake(key)}" = ${i + 1}`).join(" AND ")
    const sql = `SELECT * FROM {{schema}}.{{table}}${whereClauses ? " WHERE " + whereClauses : ""}`
    {{else}}
    const sql = `SELECT * FROM {{schema}}.{{table}}`
    {{/if}}

    const result = await query(sql{{#if methodParamsColumns}}, sqlParams{{/if}})
    return result.rows as {{methodTypeName}}[]


  } catch (error) {
    console.error("Error fetching {{methodName}}:", error)
    throw new Error("Failed to fetch {{methodName}}")
  }
}
