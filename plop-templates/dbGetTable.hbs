// GENERATED CODE - DO NOT EDIT MANUALLY - dbGetTable.hbs

"use server"
import { query } from "@/db/postgresMainDatabase/postgresMainDatabase"

{{#if paramsFields}}
export type {{typeName}}Params = {
{{#each paramsFields}}
  {{name}}: {{tsType}}
{{/each}}
}
{{/if}}

export type {{typeName}} = {
{{#each fields}}
  {{name}}{{optional}}: {{tsType}}
{{/each}}
}


export async function get{{methodName}}({{#if paramsFields}}params: {{typeName}}Params{{/if}}) {
  try {
    {{#if paramsFields}}

    const sqlParams = Object.values(params)
    const whereClauses = Object.keys(params)
                                            .map((key, i) => `"${key}" = $${i + 1}`)
                                            .join(" AND ")

    const sql = `SELECT * FROM {{schema}}.{{table}}${whereClauses ? " WHERE " + whereClauses : ""}`
    const result = await query(sql, sqlParams)
    {{else}}

    const sql = `SELECT * FROM {{schema}}.{{table}}`
    const result = await query(sql)
    {{/if}}
    return result.rows as {{typeName}}[]

  } catch (error) {
    console.error("Error fetching get{{methodName}}:", error)
    throw new Error("Failed to fetch get{{methodName}}")
  }
}
