// GENERATED CODE - DO NOT EDIT MANUALLY - dbGetTable.hbs

"use server"
import { query } from "@/db/postgresMainDatabase/postgresMainDatabase"

{{#if paramsFields}}
export type {{typeName}}Params = {
{{#each paramsFields}}
  {{name}}: {{tsType}}
{{/each}}
}
{{/if}}

export type {{typeName}} = {
{{#each fields}}
  {{name}}{{optional}}: {{tsType}}
{{/each}}
}


{{#if (eq indexMethodName "arrayToObjectKeysId")}}
export type {{typeName}}RecordBy{{typeRecordName}} = Record<string, {{typeName}}>
{{else}}
export type {{typeName}}RecordBy{{typeRecordName}} = Record<number, {{typeName}}> 
{{/if}}


export async function get{{methodName}}(params: {{typeName}}Params) {
  try {
    const sqlParams = Object.values(params)
    const whereClauses = Object.keys(params).map((key, i) => `"${key}" = $${i + 1}`).join(" AND ")
    const sql = `SELECT * FROM {{schema}}.{{table}}${whereClauses ? " WHERE " + whereClauses : ""}`


    const result = await query(sql, sqlParams)
    return result.rows as {{typeName}}[]


  } catch (error) {
    console.error("Error fetching get{{methodName}}:", error)
    throw new Error("Failed to fetch get{{methodName}}")
  }
}
