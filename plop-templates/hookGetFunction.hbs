// GENERATED CODE - DO NOT EDIT MANUALLY - hookGetFunction.hbs

"use client"
import { {{indexTypeName}} } from "@/db/postgresMainDatabase/schemas/{{schema}}/{{methodCamelName}}"
import { {{indexMethodName}} } from "@/methods/functions/converters"
import { {{methodCamelName}}Atom } from "@/store/atoms"
import { {{#if methodParamsColumns}}, {{methodParamsTypeName}}{{/if}} } from "@/db/postgresMainDatabase/schemas/{{schema}}/{{methodCamelName}}"
import { useAtomValue, useSetAtom } from "jotai"
import { useEffect, useRef } from "react"
import useSWR from "swr"

export function useFetch{{methodPascalName}}({{#if methodParamsColumns}} { params }: { params: {{methodParamsTypeName}} }{{/if}}) {
  const {{methodCamelName}} = useAtomValue({{methodCamelName}}Atom)
  const set{{methodPascalName}} = useSetAtom({{methodCamelName}}Atom)

  const { data } = useSWR(`{{apiPathParams}}`, { refreshInterval: 3000 })

  const prevDataRef = useRef<unknown>(null)

  useEffect(() => {
    if (data === undefined) return
    if (JSON.stringify(prevDataRef.current) !== JSON.stringify(data)) {
      const index = data ? ({{{indexMethodName}}}({{{indexMethodParams}}}, data) as {{indexTypeName}}) : {}
      set{{methodPascalName}}(index)
      prevDataRef.current = data
    }
  }, [data, set{{methodPascalName}}])
  
  return { {{methodCamelName}} }
}
