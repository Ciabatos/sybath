{
  "Basic API Handler": {
    "prefix": "APICustom",
    "scope": "typescript",
    "body": [
      "export async function GET(request: NextRequest): Promise<NextResponse> {",
      "  // const searchQueryParams = request.nextUrl.searchParams;",
      "  // const login = searchQueryParams.get(\"login\");",
      "",
      "  try {",
      "    const result = await ${1:yourFunctionName}();",
      "    return NextResponse.json(result);",
      "  } catch (error) {",
      "    return NextResponse.json({ success: false, error: error });",
      "  }",
      "}"
    ],
    "description": "Basic API handler with no imports and customizable function call"
  },

  "Server DB Function Template": {
    "prefix": "DBGet",
    "scope": "typescript",
    "body": [
      "\"use server\"",
      "import { query } from \"@/db/postgresMainDatabase/postgresMainDatabase\";",
      "",
      "export type T${1:EntityName} = {",
      "  // define shape later",
      "};",
      "",
      "export const get${1:EntityName} = async (${2:paramName}: ${3:paramType}) => {",
      "  if (!${2:paramName} || isNaN(${2:paramName})) {",
      "    return null;",
      "  }",
      "",
      "  try {",
      "    const result = await query(`$4`, [${2:paramName}]);",
      "    return result.rows as T${1:EntityName}[];",
      "  } catch (error) {",
      "    console.error(\"Error fetching get${1:EntityName}:\", error);",
      "    throw new Error(\"Failed to fetch get${1:EntityName}\");",
      "  }",
      "};"
    ],
    "description": "Server-side database fetch function with customizable placeholders for type, function, variables, and query."
  },

 "Reusable Fetch Hook (Client, No Imports, with Atom Naming Convention)": {
    "prefix": "useFetchHookClientUpdated",
    "scope": "typescript",
    "body": [
      "\"use client\"",
      "",
      "export function useFetch${1:EntityName}() {",
      "  const session = useSession();",
      "  const playerId = session?.data?.user.playerId;",
      "",
      "  const set${1/(.)(.*)/${1.toUpperCase()}${2}Atom/} = useSetAtom(${1/(.)(.*)/${1.toUpperCase()}${2}Atom/});",
      "  const { data, error, isLoading } = useSWR(`/api/${1/(.)(.*)/${1.toLowerCase()}${2}/}${playerId}`);",
      "",
      "  useEffect(() => {",
      "    set${1/(.)(.*)/${1.toUpperCase()}${2}Atom/}(data);",
      "  }, [data, error, isLoading]);",
      "}"
    ],
    "description": "Client-side SWR + Jotai fetch hook with dynamic atom name and endpoint based on entity name."
  }

}
