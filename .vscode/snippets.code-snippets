{
  "apiGet": {
    "prefix": "apiGet",
    "scope": "typescript, typescriptreact",
    "body": [
      "export async function GET(request: NextRequest): Promise<NextResponse> {",
      "  const session = await auth()",
      "  const sessionPlayerId = session?.user?.playerId",
      "",
      "  if (!sessionPlayerId || isNaN(sessionPlayerId)) {",
      "    return NextResponse.json({ success: false })",
      "  }",
      "  // const searchQueryParams = request.nextUrl.searchParams;",
      "  // const login = searchQueryParams.get(\"login\");",
      "",
      "  try {",
      "    const result = await get${1:/pascalCase}();",
      "    return NextResponse.json(result);",
      "  } catch (error) {",
      "    return NextResponse.json({ success: false, error: error });",
      "  }",
      "}"
    ],
    "description": "apiGet"
  },

  "Server DB Function": {
    "prefix": "DBGet",
    "scope": "typescript, typescriptreact",
    "body": [
      "\"use server\"",
      "import { query } from \"@/db/postgresMainDatabase/postgresMainDatabase\";",
      "",
      "export type T${1:/pascalCase} = {",
      "  // define shape later",
      "};",
      "",
      "export const get${1:/pascalCase} = async (${2:paramName}: ${3:paramType}) => {",
      "  if (!${2:paramName} || isNaN(${2:paramName})) {",
      "    return null;",
      "  }",
      "",
      "  try {",
      "    const result = await query(`$4`, [${2:paramName}]);",
      "    return result.rows as T${1:/pascalCase}[];",
      "  } catch (error) {",
      "    console.error(\"Error fetching get${1:/pascalCase}:\", error);",
      "    throw new Error(\"Failed to fetch get${1:/pascalCase}\");",
      "  }",
      "};"
    ],
    "description": "Server-side database fetch function."
  },

  "Reusable Fetch Hook": {
    "prefix": "useFetchHook",
    "scope": "typescript, typescriptreact",
    "body": [
      "\"use client\"",
      "",
      "export function useFetch${1:/pascalCase}() {",
      "  const session = useSession();",
      "  const playerId = session?.data?.user.playerId;",
      "",
      "  const set${1:/pascalCase}Atom = useSetAtom(${1:/lowercase}Atom);",
      "  const { data, error, isLoading } = useSWR(`/api/${1:/lowercase}/${playerId}`);",
      "",
      "  useEffect(() => {",
      "    set${1:/lowercase}Atom(data);",   // Fixed misplaced closing bracket
      "  }, [data, error, isLoading]);",
      "}"
    ],
    "description": "Client-side SWR + Jotai fetch hook with dynamic atom name and endpoint based on entity name."
  },

  "Create Atom for Entity (with T prefix)": {
    "prefix": "createAtom",
    "scope": "typescript, typescriptreact",
    "body": [
      "export const ${1:/lowercase}Atom = atom<T${1:/pascalCase}>({});"
    ],
    "description": "Creates a new atom for the given entity name with the type TEntityName"
  }
}
